class node{
    public: 
        int data;
        node* next;
        node* prev;

    node(int val){
        data = val;
        next = NULL;
        prev = NULL;
    }
};

class doublyList{
    private: 
        node* head;
        node* tail; 

    public: 
        doublyList(){
            head = tail = NULL;
        }

    void addAtBeg(int data){
        node* newNode = new node(data);

        if(head == NULL){
            head = tail = newNode;
        }
        else{
            newNode->next = head;
            head = newNode;
            head->prev = NULL;
        }
    }

    void print(){
    node* temp = head;

    cout << " NULL ";
    while(temp != NULL){
        cout << temp->data << " <-> "; 
        temp = temp->next;
        }
        cout << "NULL";
    }

    void addAtLast(int data){
        node* newNode = new node(data); 
        node* temp = head;

        if(head == NULL){
            head = tail = newNode; 
        }
        else{
            while(temp->next != NULL){
                temp = temp->next;
            }

            newNode->prev = tail;
            tail->next = newNode;
            tail = newNode;            
        }
    }

    void delAtBeg(){
        node* temp = head;

        if(head == NULL){
            cout << " Empty List " << endl;
            return;
        }

        head = temp->next;
        delete temp;
    }

    void delAtEnd(){
        node* temp = head;

        if(head == NULL){
            cout << " Empty List " << endl;
            return;
        }

        while(temp->next->next != NULL){
            temp = temp->next;
        }

        temp->next->prev = NULL;
        temp->next = NULL;
        tail = temp;
        
    }
    
};
